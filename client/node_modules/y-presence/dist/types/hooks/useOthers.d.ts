import type { Presence, User } from "../types";
/**
 * The useOthers hook returns an array of users that are currently connected in the room
 * (excluding yourself). Each user object in the array contains the client/connection id
 * and the presence information associated to the user. The user object looks like the
 * following:
 *
 * ```
 * User<T> = {
 *    id: number, // The client id associated to the user
 *    presence?: T // The user presence
 * }
 * ```
 *
 * @example
 * import { useOthers } from "y-presence";
 *
 * // Define the presence object (ignore if not typescript)
 * type CursorPresence = {
 *    x: number;
 *    y: number;
 * }
 *
 * export default function Room() {
 *    const others = useOthers<CursorPresence>();
 *
 *    return (
 *        <>
 *          Number of other users: {others.length}
 *          others.map(({ id, presence }) => {
 *              if (!presence) return null;
 *
 *              return <Cursor key={id} x={presence.x} y={presence.y} />
 *          })
 *        </>
 *    )
 * }
 */
export declare function useOthers<T extends Presence>(): User<T>[];
//# sourceMappingURL=useOthers.d.ts.map
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/hooks/useOthers.ts
import React from "react";
function useOthers() {
  const presence = usePresence();
  const [users, setUsers] = React.useState([]);
  React.useEffect(() => {
    function handleChange() {
      setUsers(Array.from(presence.getStates().values()).filter((user) => user && user.id !== presence.clientID));
    }
    handleChange();
    presence.on("change", handleChange);
    return () => {
      presence.off("change", handleChange);
    };
  }, [presence]);
  return users;
}

// src/hooks/usePresence.ts
import React3 from "react";

// src/PresenceProvider.tsx
import React2 from "react";
var PresenceContext = React2.createContext(null);
function PresenceProvider({
  awareness,
  children
}) {
  React2.useEffect(() => {
    const currUser = awareness.getLocalState();
    if (!currUser || Object.keys(currUser).length === 0) {
      const user = { id: awareness.clientID };
      awareness.setLocalState(user);
    }
  }, [awareness]);
  React2.useEffect(() => {
    function handleUnload() {
      awareness.setLocalState(null);
    }
    window.addEventListener("unload", handleUnload);
    return () => {
      window.removeEventListener("unload", handleUnload);
    };
  });
  return /* @__PURE__ */ React2.createElement(PresenceContext.Provider, {
    value: awareness
  }, children);
}

// src/hooks/usePresence.ts
function usePresence() {
  const presence = React3.useContext(PresenceContext);
  if (presence == null) {
    throw new Error("Couldn't find PresenceProvider in the React tree");
  }
  return presence;
}

// src/hooks/useSelf.ts
import React4 from "react";
function useSelf(initialPresence) {
  const presence = usePresence();
  const [self, setSelf] = React4.useState({
    id: presence.clientID,
    presence: initialPresence
  });
  React4.useEffect(() => {
    presence.setLocalState(self);
  }, [presence, self]);
  const updatePresence = React4.useCallback((overrides) => {
    const updatedPresence = __spreadValues(__spreadValues({}, self.presence), overrides);
    presence.setLocalState({
      id: presence.clientID,
      presence: updatedPresence
    });
    setSelf(presence.getLocalState());
  }, [presence, self]);
  return {
    self,
    updatePresence
  };
}
export {
  PresenceContext,
  PresenceProvider,
  useOthers,
  usePresence,
  useSelf
};
